{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "hindu-trinidad",
   "metadata": {},
   "source": [
    "# Реализация внесения искажений в слова (Гареева)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "standard-printer",
   "metadata": {},
   "source": [
    "### Функция сложности слова"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "smart-intranet",
   "metadata": {},
   "outputs": [],
   "source": [
    "%run scripts/word_difficulty.py"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "multiple-cologne",
   "metadata": {},
   "source": [
    "### Ударения"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "czech-review",
   "metadata": {},
   "source": [
    "Скачаем датасет ударений для проверки безударных мест."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "deluxe-aquarium",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>stress</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Lemma</th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>-де</th>\n",
       "      <td>-д^е</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>-ка</th>\n",
       "      <td>-к^а</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>-либо</th>\n",
       "      <td>-л^ибо</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>-нибудь</th>\n",
       "      <td>-ниб^удь</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>-с</th>\n",
       "      <td>-с</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>-таки</th>\n",
       "      <td>-так^и</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>-то</th>\n",
       "      <td>-т^о</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>­вычеркнуть</th>\n",
       "      <td>­в^ычеркнуть</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>а</th>\n",
       "      <td>^а</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>а-конто</th>\n",
       "      <td>а-к^онто</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                   stress\n",
       "Lemma                    \n",
       "-де                  -д^е\n",
       "-ка                  -к^а\n",
       "-либо              -л^ибо\n",
       "-нибудь          -ниб^удь\n",
       "-с                     -с\n",
       "-таки              -так^и\n",
       "-то                  -т^о\n",
       "­вычеркнуть  ­в^ычеркнуть\n",
       "а                      ^а\n",
       "а-конто          а-к^онто"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "fullname = save_zip_csv(url='https://github.com/Koziev/NLP_Datasets/raw/master/Stress/all_accents.zip',\n",
    "                        dirname='datasets/stress',\n",
    "                        new_filename='all_accents.tsv')\n",
    "stress_df = pd.read_csv(fullname, sep='\\t', names=['Lemma', 'stress'])\n",
    "stress_df = stress_df.drop_duplicates(subset=['Lemma'])\n",
    "stress_df = stress_df.set_index('Lemma')\n",
    "stress_df.head(10)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "specific-filter",
   "metadata": {},
   "source": [
    "### Получение морфем слова"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "geological-millennium",
   "metadata": {},
   "source": [
    "Многие неочевидные места в правописании слова зависят от морфемы, поэтому было бы здорово учитывать их, если это возможно."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "behind-court",
   "metadata": {},
   "outputs": [],
   "source": [
    "def get_morphs_list(lemma: str) -> List[str]:\n",
    "    if lemma not in morph_df.index:\n",
    "        return []\n",
    "    return list(morph_df.loc[lemma]['analysis'].split('/'))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "biblical-vector",
   "metadata": {},
   "source": [
    "Протестируем"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "minute-source",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['не', 'дисциплин', \"и'р\", 'ова', 'нн', 'ый']\n"
     ]
    }
   ],
   "source": [
    "word='недисциплинированный'\n",
    "print(get_morphs_list(lemma=word))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "disturbed-sharing",
   "metadata": {},
   "source": [
    "### Отбор наиболее подходящих искажений"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "moved-curve",
   "metadata": {},
   "source": [
    "Так как мы не сможем брать все искажения - для тестов это неудобно, будет отбирать несколько самых подходящих искажений там, где это необходимо. Наиболее подходящие искажения будем определять следующим образом: \n",
    "1. Возьмем большой список лемм - к примеру из **morph_df**.\n",
    "2. Для каждой буквы каждого слова посчитаем количество разнообразных букв, идущих за ней, и разделим полученные результаты на максимальный для каждого слова, чтобы отнормировать результаты от 0 до 1.\n",
    "3. Для слова-искажения будем брать среднее значение результатов для каждой буквы.\n",
    "4. Будем брать слова-искажения с самым большим полученным значением."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "initial-appraisal",
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>а</th>\n",
       "      <th>о</th>\n",
       "      <th>и</th>\n",
       "      <th>т</th>\n",
       "      <th>ц</th>\n",
       "      <th>е</th>\n",
       "      <th>с</th>\n",
       "      <th>з</th>\n",
       "      <th>л</th>\n",
       "      <th>р</th>\n",
       "      <th>...</th>\n",
       "      <th>ю</th>\n",
       "      <th>ф</th>\n",
       "      <th>б</th>\n",
       "      <th>г</th>\n",
       "      <th>ж</th>\n",
       "      <th>я</th>\n",
       "      <th>щ</th>\n",
       "      <th>й</th>\n",
       "      <th>э</th>\n",
       "      <th>ъ</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>к</th>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.732610</td>\n",
       "      <td>0.593780</td>\n",
       "      <td>0.140574</td>\n",
       "      <td>0.021023</td>\n",
       "      <td>0.045243</td>\n",
       "      <td>0.068301</td>\n",
       "      <td>0.006588</td>\n",
       "      <td>0.151424</td>\n",
       "      <td>0.254021</td>\n",
       "      <td>...</td>\n",
       "      <td>0.001550</td>\n",
       "      <td>0.000194</td>\n",
       "      <td>0.000484</td>\n",
       "      <td>0.000484</td>\n",
       "      <td>0.000097</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>л</th>\n",
       "      <td>0.586393</td>\n",
       "      <td>0.892337</td>\n",
       "      <td>0.918998</td>\n",
       "      <td>0.035256</td>\n",
       "      <td>0.001020</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.012821</td>\n",
       "      <td>0.011946</td>\n",
       "      <td>0.102855</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>...</td>\n",
       "      <td>0.130682</td>\n",
       "      <td>0.001311</td>\n",
       "      <td>0.013549</td>\n",
       "      <td>0.016754</td>\n",
       "      <td>0.011218</td>\n",
       "      <td>0.268502</td>\n",
       "      <td>0.001603</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>и</th>\n",
       "      <td>0.068037</td>\n",
       "      <td>0.150143</td>\n",
       "      <td>0.005091</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.161992</td>\n",
       "      <td>0.439600</td>\n",
       "      <td>0.438026</td>\n",
       "      <td>0.322966</td>\n",
       "      <td>0.201148</td>\n",
       "      <td>0.437471</td>\n",
       "      <td>...</td>\n",
       "      <td>0.001389</td>\n",
       "      <td>0.047950</td>\n",
       "      <td>0.054244</td>\n",
       "      <td>0.091456</td>\n",
       "      <td>0.033232</td>\n",
       "      <td>0.211700</td>\n",
       "      <td>0.036842</td>\n",
       "      <td>0.694529</td>\n",
       "      <td>0.001851</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>б</th>\n",
       "      <td>0.743445</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.631303</td>\n",
       "      <td>0.035498</td>\n",
       "      <td>0.014522</td>\n",
       "      <td>0.937878</td>\n",
       "      <td>0.137152</td>\n",
       "      <td>0.011295</td>\n",
       "      <td>0.516337</td>\n",
       "      <td>0.817265</td>\n",
       "      <td>...</td>\n",
       "      <td>0.027027</td>\n",
       "      <td>0.001210</td>\n",
       "      <td>0.012505</td>\n",
       "      <td>0.011295</td>\n",
       "      <td>0.036305</td>\n",
       "      <td>0.022590</td>\n",
       "      <td>0.064542</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.002420</td>\n",
       "      <td>0.045986</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>н</th>\n",
       "      <td>0.347816</td>\n",
       "      <td>0.409574</td>\n",
       "      <td>0.618757</td>\n",
       "      <td>0.138074</td>\n",
       "      <td>0.022508</td>\n",
       "      <td>0.256439</td>\n",
       "      <td>0.069653</td>\n",
       "      <td>0.008287</td>\n",
       "      <td>0.000672</td>\n",
       "      <td>0.001624</td>\n",
       "      <td>...</td>\n",
       "      <td>0.004591</td>\n",
       "      <td>0.009351</td>\n",
       "      <td>0.000560</td>\n",
       "      <td>0.024748</td>\n",
       "      <td>0.005655</td>\n",
       "      <td>0.054815</td>\n",
       "      <td>0.006495</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000784</td>\n",
       "      <td>0.000840</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>у</th>\n",
       "      <td>0.062667</td>\n",
       "      <td>0.012000</td>\n",
       "      <td>0.030333</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.019667</td>\n",
       "      <td>0.030667</td>\n",
       "      <td>0.562000</td>\n",
       "      <td>0.178333</td>\n",
       "      <td>0.449667</td>\n",
       "      <td>0.613333</td>\n",
       "      <td>...</td>\n",
       "      <td>0.064333</td>\n",
       "      <td>0.026000</td>\n",
       "      <td>0.379667</td>\n",
       "      <td>0.254667</td>\n",
       "      <td>0.247667</td>\n",
       "      <td>0.014000</td>\n",
       "      <td>0.113000</td>\n",
       "      <td>0.020000</td>\n",
       "      <td>0.010667</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>д</th>\n",
       "      <td>0.527943</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.701286</td>\n",
       "      <td>0.031652</td>\n",
       "      <td>0.031157</td>\n",
       "      <td>0.847923</td>\n",
       "      <td>0.173591</td>\n",
       "      <td>0.022255</td>\n",
       "      <td>0.075420</td>\n",
       "      <td>0.315529</td>\n",
       "      <td>...</td>\n",
       "      <td>0.013600</td>\n",
       "      <td>0.001731</td>\n",
       "      <td>0.027201</td>\n",
       "      <td>0.033630</td>\n",
       "      <td>0.031652</td>\n",
       "      <td>0.037092</td>\n",
       "      <td>0.002473</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.002473</td>\n",
       "      <td>0.022997</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>о</th>\n",
       "      <td>0.014577</td>\n",
       "      <td>0.061531</td>\n",
       "      <td>0.061992</td>\n",
       "      <td>0.501534</td>\n",
       "      <td>0.030536</td>\n",
       "      <td>0.055777</td>\n",
       "      <td>0.554857</td>\n",
       "      <td>0.169019</td>\n",
       "      <td>0.539359</td>\n",
       "      <td>0.591376</td>\n",
       "      <td>...</td>\n",
       "      <td>0.003146</td>\n",
       "      <td>0.053782</td>\n",
       "      <td>0.371720</td>\n",
       "      <td>0.247583</td>\n",
       "      <td>0.101504</td>\n",
       "      <td>0.020868</td>\n",
       "      <td>0.027006</td>\n",
       "      <td>0.152447</td>\n",
       "      <td>0.011969</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>т</th>\n",
       "      <td>0.168169</td>\n",
       "      <td>0.235430</td>\n",
       "      <td>0.216817</td>\n",
       "      <td>0.008601</td>\n",
       "      <td>0.001858</td>\n",
       "      <td>0.206736</td>\n",
       "      <td>0.029691</td>\n",
       "      <td>0.000929</td>\n",
       "      <td>0.016067</td>\n",
       "      <td>0.196725</td>\n",
       "      <td>...</td>\n",
       "      <td>0.005367</td>\n",
       "      <td>0.000963</td>\n",
       "      <td>0.004473</td>\n",
       "      <td>0.004301</td>\n",
       "      <td>0.001307</td>\n",
       "      <td>0.015860</td>\n",
       "      <td>0.001892</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000482</td>\n",
       "      <td>0.000929</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>а</th>\n",
       "      <td>0.001538</td>\n",
       "      <td>0.003403</td>\n",
       "      <td>0.021584</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.056314</td>\n",
       "      <td>0.014218</td>\n",
       "      <td>0.234535</td>\n",
       "      <td>0.158361</td>\n",
       "      <td>0.254673</td>\n",
       "      <td>0.236865</td>\n",
       "      <td>...</td>\n",
       "      <td>0.015757</td>\n",
       "      <td>0.033425</td>\n",
       "      <td>0.071419</td>\n",
       "      <td>0.071745</td>\n",
       "      <td>0.053704</td>\n",
       "      <td>0.015570</td>\n",
       "      <td>0.021957</td>\n",
       "      <td>0.022143</td>\n",
       "      <td>0.005874</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>ж</th>\n",
       "      <td>0.550933</td>\n",
       "      <td>0.081067</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.001067</td>\n",
       "      <td>0.000533</td>\n",
       "      <td>0.989333</td>\n",
       "      <td>0.017067</td>\n",
       "      <td>0.002667</td>\n",
       "      <td>0.010667</td>\n",
       "      <td>0.013867</td>\n",
       "      <td>...</td>\n",
       "      <td>0.001067</td>\n",
       "      <td>0.000533</td>\n",
       "      <td>0.014400</td>\n",
       "      <td>0.008000</td>\n",
       "      <td>0.030933</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.001600</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>р</th>\n",
       "      <td>0.842207</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.542071</td>\n",
       "      <td>0.092692</td>\n",
       "      <td>0.009629</td>\n",
       "      <td>0.709636</td>\n",
       "      <td>0.075447</td>\n",
       "      <td>0.013006</td>\n",
       "      <td>0.014874</td>\n",
       "      <td>0.012646</td>\n",
       "      <td>...</td>\n",
       "      <td>0.012575</td>\n",
       "      <td>0.012790</td>\n",
       "      <td>0.023065</td>\n",
       "      <td>0.045197</td>\n",
       "      <td>0.027017</td>\n",
       "      <td>0.102465</td>\n",
       "      <td>0.008838</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000575</td>\n",
       "      <td>0.000216</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>е</th>\n",
       "      <td>0.018590</td>\n",
       "      <td>0.071925</td>\n",
       "      <td>0.030773</td>\n",
       "      <td>0.462594</td>\n",
       "      <td>0.085552</td>\n",
       "      <td>0.018410</td>\n",
       "      <td>0.565472</td>\n",
       "      <td>0.177331</td>\n",
       "      <td>0.533255</td>\n",
       "      <td>0.939897</td>\n",
       "      <td>...</td>\n",
       "      <td>0.001715</td>\n",
       "      <td>0.027795</td>\n",
       "      <td>0.090425</td>\n",
       "      <td>0.098547</td>\n",
       "      <td>0.083657</td>\n",
       "      <td>0.022471</td>\n",
       "      <td>0.026171</td>\n",
       "      <td>0.081942</td>\n",
       "      <td>0.002978</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>з</th>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.295276</td>\n",
       "      <td>0.255011</td>\n",
       "      <td>0.014467</td>\n",
       "      <td>0.001569</td>\n",
       "      <td>0.125327</td>\n",
       "      <td>0.004881</td>\n",
       "      <td>0.013422</td>\n",
       "      <td>0.084190</td>\n",
       "      <td>0.074255</td>\n",
       "      <td>...</td>\n",
       "      <td>0.006798</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.062053</td>\n",
       "      <td>0.072686</td>\n",
       "      <td>0.033641</td>\n",
       "      <td>0.020917</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000697</td>\n",
       "      <td>0.019348</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>с</th>\n",
       "      <td>0.145265</td>\n",
       "      <td>0.253567</td>\n",
       "      <td>0.165077</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.015598</td>\n",
       "      <td>0.160198</td>\n",
       "      <td>0.108450</td>\n",
       "      <td>0.000517</td>\n",
       "      <td>0.133659</td>\n",
       "      <td>0.020699</td>\n",
       "      <td>...</td>\n",
       "      <td>0.003475</td>\n",
       "      <td>0.013750</td>\n",
       "      <td>0.017964</td>\n",
       "      <td>0.009093</td>\n",
       "      <td>0.002883</td>\n",
       "      <td>0.821616</td>\n",
       "      <td>0.002587</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000444</td>\n",
       "      <td>0.004509</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>в</th>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.442491</td>\n",
       "      <td>0.192412</td>\n",
       "      <td>0.031638</td>\n",
       "      <td>0.001324</td>\n",
       "      <td>0.289784</td>\n",
       "      <td>0.048907</td>\n",
       "      <td>0.032205</td>\n",
       "      <td>0.070524</td>\n",
       "      <td>0.033592</td>\n",
       "      <td>...</td>\n",
       "      <td>0.000441</td>\n",
       "      <td>0.000378</td>\n",
       "      <td>0.001891</td>\n",
       "      <td>0.001702</td>\n",
       "      <td>0.000882</td>\n",
       "      <td>0.027541</td>\n",
       "      <td>0.010903</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000126</td>\n",
       "      <td>0.000756</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>ц</th>\n",
       "      <td>0.607943</td>\n",
       "      <td>0.090410</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.002112</td>\n",
       "      <td>0.005915</td>\n",
       "      <td>0.522602</td>\n",
       "      <td>0.003380</td>\n",
       "      <td>0.000845</td>\n",
       "      <td>0.003380</td>\n",
       "      <td>0.001690</td>\n",
       "      <td>...</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000422</td>\n",
       "      <td>0.001690</td>\n",
       "      <td>0.001267</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>м</th>\n",
       "      <td>0.951284</td>\n",
       "      <td>0.892009</td>\n",
       "      <td>0.565395</td>\n",
       "      <td>0.003120</td>\n",
       "      <td>0.000240</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.027118</td>\n",
       "      <td>0.005760</td>\n",
       "      <td>0.086633</td>\n",
       "      <td>0.010559</td>\n",
       "      <td>...</td>\n",
       "      <td>0.002400</td>\n",
       "      <td>0.014159</td>\n",
       "      <td>0.071274</td>\n",
       "      <td>0.002400</td>\n",
       "      <td>0.000240</td>\n",
       "      <td>0.089273</td>\n",
       "      <td>0.007679</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.002400</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>ь</th>\n",
       "      <td>0.000092</td>\n",
       "      <td>0.004492</td>\n",
       "      <td>0.007058</td>\n",
       "      <td>0.032634</td>\n",
       "      <td>0.010633</td>\n",
       "      <td>0.062151</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.006325</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000092</td>\n",
       "      <td>...</td>\n",
       "      <td>0.008433</td>\n",
       "      <td>0.006325</td>\n",
       "      <td>0.005867</td>\n",
       "      <td>0.004858</td>\n",
       "      <td>0.000458</td>\n",
       "      <td>0.024659</td>\n",
       "      <td>0.014208</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000092</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>г</th>\n",
       "      <td>0.748394</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.563409</td>\n",
       "      <td>0.006764</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.280014</td>\n",
       "      <td>0.007440</td>\n",
       "      <td>0.001015</td>\n",
       "      <td>0.336490</td>\n",
       "      <td>0.788637</td>\n",
       "      <td>...</td>\n",
       "      <td>0.000676</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.002705</td>\n",
       "      <td>0.005073</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000338</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000338</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>ю</th>\n",
       "      <td>0.015228</td>\n",
       "      <td>0.015228</td>\n",
       "      <td>0.018613</td>\n",
       "      <td>0.175973</td>\n",
       "      <td>0.067682</td>\n",
       "      <td>0.003384</td>\n",
       "      <td>0.213198</td>\n",
       "      <td>0.143824</td>\n",
       "      <td>0.115059</td>\n",
       "      <td>0.323181</td>\n",
       "      <td>...</td>\n",
       "      <td>0.006768</td>\n",
       "      <td>0.020305</td>\n",
       "      <td>0.329949</td>\n",
       "      <td>0.060914</td>\n",
       "      <td>0.153976</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.055838</td>\n",
       "      <td>0.003384</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>х</th>\n",
       "      <td>0.698812</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.412998</td>\n",
       "      <td>0.125087</td>\n",
       "      <td>0.004892</td>\n",
       "      <td>0.074773</td>\n",
       "      <td>0.064291</td>\n",
       "      <td>0.006988</td>\n",
       "      <td>0.437456</td>\n",
       "      <td>0.299790</td>\n",
       "      <td>...</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.002096</td>\n",
       "      <td>0.007687</td>\n",
       "      <td>0.020266</td>\n",
       "      <td>0.002795</td>\n",
       "      <td>0.002096</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.005590</td>\n",
       "      <td>0.002795</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>ш</th>\n",
       "      <td>0.350039</td>\n",
       "      <td>0.057498</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.139083</td>\n",
       "      <td>0.000389</td>\n",
       "      <td>0.589355</td>\n",
       "      <td>0.004274</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.139472</td>\n",
       "      <td>0.005828</td>\n",
       "      <td>...</td>\n",
       "      <td>0.012044</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.001554</td>\n",
       "      <td>0.000389</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>п</th>\n",
       "      <td>0.349575</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.210297</td>\n",
       "      <td>0.039490</td>\n",
       "      <td>0.002548</td>\n",
       "      <td>0.527282</td>\n",
       "      <td>0.024204</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.242675</td>\n",
       "      <td>0.883439</td>\n",
       "      <td>...</td>\n",
       "      <td>0.000849</td>\n",
       "      <td>0.001168</td>\n",
       "      <td>0.000212</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.029087</td>\n",
       "      <td>0.001486</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000318</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>ч</th>\n",
       "      <td>0.371482</td>\n",
       "      <td>0.047806</td>\n",
       "      <td>0.659354</td>\n",
       "      <td>0.024834</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000828</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.014487</td>\n",
       "      <td>0.006002</td>\n",
       "      <td>...</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000621</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000828</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>щ</th>\n",
       "      <td>0.196394</td>\n",
       "      <td>0.005848</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.552144</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.009747</td>\n",
       "      <td>...</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>ф</th>\n",
       "      <td>0.465815</td>\n",
       "      <td>0.738542</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.111946</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.371901</td>\n",
       "      <td>0.028550</td>\n",
       "      <td>0.000751</td>\n",
       "      <td>0.168295</td>\n",
       "      <td>0.264463</td>\n",
       "      <td>...</td>\n",
       "      <td>0.006011</td>\n",
       "      <td>0.046582</td>\n",
       "      <td>0.002254</td>\n",
       "      <td>0.006762</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.009016</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.001503</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>ы</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000089</td>\n",
       "      <td>0.000668</td>\n",
       "      <td>0.027596</td>\n",
       "      <td>0.001157</td>\n",
       "      <td>0.006988</td>\n",
       "      <td>0.036899</td>\n",
       "      <td>0.011127</td>\n",
       "      <td>0.021454</td>\n",
       "      <td>0.025193</td>\n",
       "      <td>...</td>\n",
       "      <td>0.000089</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.010860</td>\n",
       "      <td>0.010994</td>\n",
       "      <td>0.006142</td>\n",
       "      <td>0.000623</td>\n",
       "      <td>0.002626</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>я</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000813</td>\n",
       "      <td>0.006504</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.051626</td>\n",
       "      <td>0.021545</td>\n",
       "      <td>0.157317</td>\n",
       "      <td>0.167480</td>\n",
       "      <td>0.056504</td>\n",
       "      <td>0.111789</td>\n",
       "      <td>...</td>\n",
       "      <td>0.016667</td>\n",
       "      <td>0.001626</td>\n",
       "      <td>0.041463</td>\n",
       "      <td>0.116667</td>\n",
       "      <td>0.126016</td>\n",
       "      <td>0.000813</td>\n",
       "      <td>0.093496</td>\n",
       "      <td>0.035772</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>й</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.064550</td>\n",
       "      <td>0.002116</td>\n",
       "      <td>0.106878</td>\n",
       "      <td>0.057143</td>\n",
       "      <td>0.026455</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.012698</td>\n",
       "      <td>0.045503</td>\n",
       "      <td>0.040212</td>\n",
       "      <td>...</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.019048</td>\n",
       "      <td>0.032804</td>\n",
       "      <td>0.011640</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.005291</td>\n",
       "      <td>0.032804</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>э</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.017500</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.317500</td>\n",
       "      <td>0.002500</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.262500</td>\n",
       "      <td>0.017500</td>\n",
       "      <td>0.987500</td>\n",
       "      <td>0.435000</td>\n",
       "      <td>...</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.085000</td>\n",
       "      <td>0.020000</td>\n",
       "      <td>0.052500</td>\n",
       "      <td>0.007500</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.015000</td>\n",
       "      <td>0.017500</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>ъ</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>...</td>\n",
       "      <td>0.087948</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.355049</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>32 rows × 32 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "          а         о         и         т         ц         е         с  \\\n",
       "к  1.000000  0.732610  0.593780  0.140574  0.021023  0.045243  0.068301   \n",
       "л  0.586393  0.892337  0.918998  0.035256  0.001020  1.000000  0.012821   \n",
       "и  0.068037  0.150143  0.005091  1.000000  0.161992  0.439600  0.438026   \n",
       "б  0.743445  1.000000  0.631303  0.035498  0.014522  0.937878  0.137152   \n",
       "н  0.347816  0.409574  0.618757  0.138074  0.022508  0.256439  0.069653   \n",
       "у  0.062667  0.012000  0.030333  1.000000  0.019667  0.030667  0.562000   \n",
       "д  0.527943  1.000000  0.701286  0.031652  0.031157  0.847923  0.173591   \n",
       "о  0.014577  0.061531  0.061992  0.501534  0.030536  0.055777  0.554857   \n",
       "т  0.168169  0.235430  0.216817  0.008601  0.001858  0.206736  0.029691   \n",
       "а  0.001538  0.003403  0.021584  1.000000  0.056314  0.014218  0.234535   \n",
       "ж  0.550933  0.081067  1.000000  0.001067  0.000533  0.989333  0.017067   \n",
       "р  0.842207  1.000000  0.542071  0.092692  0.009629  0.709636  0.075447   \n",
       "е  0.018590  0.071925  0.030773  0.462594  0.085552  0.018410  0.565472   \n",
       "з  1.000000  0.295276  0.255011  0.014467  0.001569  0.125327  0.004881   \n",
       "с  0.145265  0.253567  0.165077  1.000000  0.015598  0.160198  0.108450   \n",
       "в  1.000000  0.442491  0.192412  0.031638  0.001324  0.289784  0.048907   \n",
       "ц  0.607943  0.090410  1.000000  0.002112  0.005915  0.522602  0.003380   \n",
       "м  0.951284  0.892009  0.565395  0.003120  0.000240  1.000000  0.027118   \n",
       "ь  0.000092  0.004492  0.007058  0.032634  0.010633  0.062151  1.000000   \n",
       "г  0.748394  1.000000  0.563409  0.006764  0.000000  0.280014  0.007440   \n",
       "ю  0.015228  0.015228  0.018613  0.175973  0.067682  0.003384  0.213198   \n",
       "х  0.698812  1.000000  0.412998  0.125087  0.004892  0.074773  0.064291   \n",
       "ш  0.350039  0.057498  1.000000  0.139083  0.000389  0.589355  0.004274   \n",
       "п  0.349575  1.000000  0.210297  0.039490  0.002548  0.527282  0.024204   \n",
       "ч  0.371482  0.047806  0.659354  0.024834  0.000000  1.000000  0.000828   \n",
       "щ  0.196394  0.005848  1.000000  0.000000  0.000000  0.552144  0.000000   \n",
       "ф  0.465815  0.738542  1.000000  0.111946  0.000000  0.371901  0.028550   \n",
       "ы  0.000000  0.000089  0.000668  0.027596  0.001157  0.006988  0.036899   \n",
       "я  0.000000  0.000813  0.006504  1.000000  0.051626  0.021545  0.157317   \n",
       "й  0.000000  0.064550  0.002116  0.106878  0.057143  0.026455  1.000000   \n",
       "э  0.000000  0.017500  0.000000  0.317500  0.002500  0.000000  0.262500   \n",
       "ъ  0.000000  0.000000  0.000000  0.000000  0.000000  1.000000  0.000000   \n",
       "\n",
       "          з         л         р  ...         ю         ф         б         г  \\\n",
       "к  0.006588  0.151424  0.254021  ...  0.001550  0.000194  0.000484  0.000484   \n",
       "л  0.011946  0.102855  0.000000  ...  0.130682  0.001311  0.013549  0.016754   \n",
       "и  0.322966  0.201148  0.437471  ...  0.001389  0.047950  0.054244  0.091456   \n",
       "б  0.011295  0.516337  0.817265  ...  0.027027  0.001210  0.012505  0.011295   \n",
       "н  0.008287  0.000672  0.001624  ...  0.004591  0.009351  0.000560  0.024748   \n",
       "у  0.178333  0.449667  0.613333  ...  0.064333  0.026000  0.379667  0.254667   \n",
       "д  0.022255  0.075420  0.315529  ...  0.013600  0.001731  0.027201  0.033630   \n",
       "о  0.169019  0.539359  0.591376  ...  0.003146  0.053782  0.371720  0.247583   \n",
       "т  0.000929  0.016067  0.196725  ...  0.005367  0.000963  0.004473  0.004301   \n",
       "а  0.158361  0.254673  0.236865  ...  0.015757  0.033425  0.071419  0.071745   \n",
       "ж  0.002667  0.010667  0.013867  ...  0.001067  0.000533  0.014400  0.008000   \n",
       "р  0.013006  0.014874  0.012646  ...  0.012575  0.012790  0.023065  0.045197   \n",
       "е  0.177331  0.533255  0.939897  ...  0.001715  0.027795  0.090425  0.098547   \n",
       "з  0.013422  0.084190  0.074255  ...  0.006798  0.000000  0.062053  0.072686   \n",
       "с  0.000517  0.133659  0.020699  ...  0.003475  0.013750  0.017964  0.009093   \n",
       "в  0.032205  0.070524  0.033592  ...  0.000441  0.000378  0.001891  0.001702   \n",
       "ц  0.000845  0.003380  0.001690  ...  0.000000  0.000422  0.001690  0.001267   \n",
       "м  0.005760  0.086633  0.010559  ...  0.002400  0.014159  0.071274  0.002400   \n",
       "ь  0.006325  0.000000  0.000092  ...  0.008433  0.006325  0.005867  0.004858   \n",
       "г  0.001015  0.336490  0.788637  ...  0.000676  0.000000  0.002705  0.005073   \n",
       "ю  0.143824  0.115059  0.323181  ...  0.006768  0.020305  0.329949  0.060914   \n",
       "х  0.006988  0.437456  0.299790  ...  0.000000  0.002096  0.007687  0.020266   \n",
       "ш  0.000000  0.139472  0.005828  ...  0.012044  0.000000  0.001554  0.000389   \n",
       "п  0.000000  0.242675  0.883439  ...  0.000849  0.001168  0.000212  0.000000   \n",
       "ч  0.000000  0.014487  0.006002  ...  0.000000  0.000000  0.000621  0.000000   \n",
       "щ  0.000000  0.000000  0.009747  ...  0.000000  0.000000  0.000000  0.000000   \n",
       "ф  0.000751  0.168295  0.264463  ...  0.006011  0.046582  0.002254  0.006762   \n",
       "ы  0.011127  0.021454  0.025193  ...  0.000089  0.000000  0.010860  0.010994   \n",
       "я  0.167480  0.056504  0.111789  ...  0.016667  0.001626  0.041463  0.116667   \n",
       "й  0.012698  0.045503  0.040212  ...  0.000000  0.019048  0.032804  0.011640   \n",
       "э  0.017500  0.987500  0.435000  ...  0.000000  0.085000  0.020000  0.052500   \n",
       "ъ  0.000000  0.000000  0.000000  ...  0.087948  0.000000  0.000000  0.000000   \n",
       "\n",
       "          ж         я         щ         й         э         ъ  \n",
       "к  0.000097  0.000000  0.000000  0.000000  0.000000  0.000000  \n",
       "л  0.011218  0.268502  0.001603  0.000000  0.000000  0.000000  \n",
       "и  0.033232  0.211700  0.036842  0.694529  0.001851  0.000000  \n",
       "б  0.036305  0.022590  0.064542  0.000000  0.002420  0.045986  \n",
       "н  0.005655  0.054815  0.006495  0.000000  0.000784  0.000840  \n",
       "у  0.247667  0.014000  0.113000  0.020000  0.010667  0.000000  \n",
       "д  0.031652  0.037092  0.002473  0.000000  0.002473  0.022997  \n",
       "о  0.101504  0.020868  0.027006  0.152447  0.011969  0.000000  \n",
       "т  0.001307  0.015860  0.001892  0.000000  0.000482  0.000929  \n",
       "а  0.053704  0.015570  0.021957  0.022143  0.005874  0.000000  \n",
       "ж  0.030933  0.000000  0.000000  0.000000  0.000000  0.001600  \n",
       "р  0.027017  0.102465  0.008838  0.000000  0.000575  0.000216  \n",
       "е  0.083657  0.022471  0.026171  0.081942  0.002978  0.000000  \n",
       "з  0.033641  0.020917  0.000000  0.000000  0.000697  0.019348  \n",
       "с  0.002883  0.821616  0.002587  0.000000  0.000444  0.004509  \n",
       "в  0.000882  0.027541  0.010903  0.000000  0.000126  0.000756  \n",
       "ц  0.000000  0.000000  0.000000  0.000000  0.000000  0.000000  \n",
       "м  0.000240  0.089273  0.007679  0.000000  0.002400  0.000000  \n",
       "ь  0.000458  0.024659  0.014208  0.000000  0.000092  0.000000  \n",
       "г  0.000000  0.000338  0.000000  0.000000  0.000338  0.000000  \n",
       "ю  0.153976  0.000000  1.000000  0.055838  0.003384  0.000000  \n",
       "х  0.002795  0.002096  0.000000  0.000000  0.005590  0.002795  \n",
       "ш  0.000000  0.000000  0.000000  0.000000  0.000000  0.000000  \n",
       "п  0.000000  0.029087  0.001486  0.000000  0.000318  0.000000  \n",
       "ч  0.000828  0.000000  0.000000  0.000000  0.000000  0.000000  \n",
       "щ  0.000000  0.000000  0.000000  0.000000  0.000000  0.000000  \n",
       "ф  0.000000  0.009016  0.000000  0.000000  0.001503  0.000000  \n",
       "ы  0.006142  0.000623  0.002626  1.000000  0.000000  0.000000  \n",
       "я  0.126016  0.000813  0.093496  0.035772  0.000000  0.000000  \n",
       "й  0.000000  0.005291  0.032804  0.000000  0.000000  0.000000  \n",
       "э  0.007500  0.000000  0.000000  0.015000  0.017500  0.000000  \n",
       "ъ  0.000000  0.355049  0.000000  0.000000  0.000000  0.000000  \n",
       "\n",
       "[32 rows x 32 columns]"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from collections import defaultdict\n",
    "\n",
    "letters_dict = dict()\n",
    "letters = set('абвгдежзийклмнопрстуфхцчшщъыьэюя')\n",
    "for word in morph_df.index:\n",
    "    for i in range(len(word) - 1):\n",
    "        c = word[i]\n",
    "        next_c = word[i + 1]\n",
    "        if c in letters and next_c in letters:\n",
    "            if c not in letters_dict:\n",
    "                letters_dict[c] = defaultdict(int)\n",
    "            letters_dict[c][next_c] += 1\n",
    "letter_df = pd.DataFrame.from_dict(letters_dict, orient='index').fillna(0)\n",
    "letter_df = letter_df.div(letter_df.max(axis=1), axis=0)\n",
    "letter_df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "retired-porcelain",
   "metadata": {},
   "outputs": [],
   "source": [
    "def get_word_probability(word: str) -> int:\n",
    "    probability = 0\n",
    "    amount = 0\n",
    "    for i in range(len(word) - 1):\n",
    "        c = word[i]\n",
    "        next_c = word[i + 1]\n",
    "        if c in letters and next_c in letters:\n",
    "            probability += letter_df.loc[c][next_c]\n",
    "            amount += 1\n",
    "    return probability / amount if amount else 0\n",
    "\n",
    "def get_n_best_words(words, max_amount: int=1) -> List[str]:\n",
    "    if max_amount < len(words):\n",
    "        return sorted(list(words), key=lambda word: get_word_probability(word), reverse=True)[:max_amount]\n",
    "    return list(words)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "breathing-universal",
   "metadata": {},
   "source": [
    "Протестируем"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "focal-republican",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.4293764002143299\n",
      "0.5192654313584053\n",
      "0.3839760169451163\n",
      "['соберается', 'собирается']\n",
      "0.402000381746182\n",
      "0.07404077887675957\n",
      "['жизнь', 'жызнь']\n"
     ]
    }
   ],
   "source": [
    "print(get_word_probability('собирается'))\n",
    "print(get_word_probability('соберается'))\n",
    "print(get_word_probability('сабирается'))\n",
    "print(get_n_best_words(['собирается', 'соберается', 'сабирается'], max_amount=2))\n",
    "print(get_word_probability('жизнь'))\n",
    "print(get_word_probability('жызнь'))\n",
    "print(get_n_best_words(['жизнь', 'жызнь'], max_amount=3))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "virtual-advocate",
   "metadata": {},
   "source": [
    "### Безударные гласные"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "thorough-calibration",
   "metadata": {},
   "source": [
    "Будем заменять безударные О и Е в слове на А и И. Определять безударность с помощью списка морфем с ударениями."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "adopted-weight",
   "metadata": {},
   "outputs": [],
   "source": [
    "stress_vowels_dict = {'о':'а', 'а':'о', 'е':'и', 'и':'е', 'я':'е'}\n",
    "\n",
    "def stress_vowels_distortion(word: str, stress_word: str, morphs_list: List[str]=[], max_amount: int=1) -> List[str]:  \n",
    "    def do_distortion(word_: str, stress_word: str) -> None:\n",
    "        if 0 <= stress_word.find('^') < len(stress_word) - 2:\n",
    "            i = stress_word.find('^')\n",
    "            stress_word = stress_word[:i] + stress_word[i + 1].upper() + stress_word[i + 2:]\n",
    "        else:\n",
    "            return []\n",
    "        for i in range(1, len(word_) - 3):\n",
    "            if i < len(stress_word) and stress_word[i] in stress_vowels_dict and stress_word[i] == word_[i]:\n",
    "                distortion = word_[:i] + stress_vowels_dict[word_[i]] + word_[i + 1:]\n",
    "                if distortion not in distortions and distortion != word:\n",
    "                    distortions.add(distortion)\n",
    "                    do_distortion(distortion, stress_word)\n",
    "        \n",
    "    distortions = set()\n",
    "    do_distortion(word, stress_word)\n",
    "    return get_n_best_words(distortions, max_amount)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "pursuant-humanity",
   "metadata": {},
   "source": [
    "Протестируем"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "prepared-husband",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['пабедитель', 'побидитель']\n",
      "[]\n",
      "['нописаные', 'написоные']\n"
     ]
    }
   ],
   "source": [
    "word='победитель'\n",
    "print(stress_vowels_distortion(word, stress_word=stress_df.loc[word]['stress'], max_amount=2))\n",
    "word='гриб'\n",
    "print(stress_vowels_distortion(word, stress_word=stress_df.loc[word]['stress'], max_amount=2))\n",
    "print(stress_vowels_distortion('написаные', stress_word=stress_df.loc['написанные']['stress'], max_amount=2))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "approximate-messaging",
   "metadata": {},
   "source": [
    "### Парные по глухости/звонкости согласные"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "visible-mayor",
   "metadata": {},
   "source": [
    "Заменим парные звонкие согласные в конце слова или перед глухими на их пару."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "amateur-guess",
   "metadata": {},
   "outputs": [],
   "source": [
    "deaf_consonants = set('пфктшсхцчщ')\n",
    "consonants_pairs = {\n",
    "    'б':'п', \n",
    "    'г':'к', \n",
    "    'д':'т', \n",
    "    'ж':'ш', \n",
    "    'з':'с', \n",
    "}\n",
    "\n",
    "def consonants_distortion(word: str, morphs_list: List[str]=[], max_amount: int=1) -> List[str]:  \n",
    "    def do_distortion(word_: str) -> None:\n",
    "        for i in range(len(word_)):\n",
    "            distortion = None\n",
    "            c = word_[i] \n",
    "            after_c = word_[i + 1] if i < len(word_) - 1 else None\n",
    "            if c in consonants_pairs and (i == len(word_) - 1 or after_c in deaf_consonants):\n",
    "                distortion = word_[:i] + consonants_pairs[c] + word_[i + 1:]\n",
    "                if distortion not in distortions and distortion != word:\n",
    "                    distortions.add(distortion)\n",
    "                    do_distortion(distortion)\n",
    "        \n",
    "    distortions = set()\n",
    "    do_distortion(word)\n",
    "    return get_n_best_words(distortions, max_amount)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "careful-melissa",
   "metadata": {},
   "source": [
    "Протестируем"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "freelance-champion",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['тетратка']\n",
      "['грип']\n",
      "[]\n"
     ]
    }
   ],
   "source": [
    "word='тетрадка'\n",
    "print(consonants_distortion(word))\n",
    "word='гриб'\n",
    "print(consonants_distortion(word))\n",
    "word='отвориться'\n",
    "print(consonants_distortion(word))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "mobile-norman",
   "metadata": {},
   "source": [
    "### Чередование безударных гласных в корне"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "twelve-conversion",
   "metadata": {},
   "source": [
    "Заменим корни с помощью спика морфем на их пару."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "secure-answer",
   "metadata": {},
   "outputs": [],
   "source": [
    "root_pairs = {'раст':'рост', 'ращ':'рощ', 'рос':'рас',\n",
    "               'лаг':'лог', 'лож':'лаж',\n",
    "               'скак':'скок', 'скоч':'скач',\n",
    "               'гар':'гор', 'гор':'гар', \n",
    "               'твар':'твор','твор':'твар', \n",
    "               'клан':'клон', 'клон':'клан',\n",
    "               'зар':'зор', 'зор':'зар',\n",
    "               'плав':'плов', 'плов':'плав',\n",
    "               'мак':'мок', 'моч':'мач',\n",
    "               'равн':'ровн', 'ровн':'равн',\n",
    "               'бер':'бир', 'бир':'бер',\n",
    "               'дер':'дир', 'дир':'дер',\n",
    "               'пер':'пир', 'пир':'пер',\n",
    "               'тер':'тир', 'тир':'тер',\n",
    "               'мер':'мир', 'мир':'мер',\n",
    "               'жег':'жиг', 'жиг':'жег',\n",
    "               'стел':'стил', 'стил':'стел',\n",
    "               'блест':'блист', 'блист':'блест',\n",
    "               'чет':'чит', 'чит':'чет',\n",
    "               'кас':'кос', 'кос':'кас'}\n",
    "    \n",
    "def roots_distortion(word: str, morphs_list: List[str]=[], max_amount: int=1) -> List[str]:\n",
    "    def do_distortion(word_: str) -> None:\n",
    "        index = 0\n",
    "        for morph in morphs_list:\n",
    "            if morph in root_pairs and morph == word_[index:index + len(morph)]:\n",
    "                distortion = word_[:index] + root_pairs[morph] + word_[index + len(morph):]\n",
    "                if distortion not in distortions and distortion != word:\n",
    "                    distortions.add(distortion)\n",
    "                    do_distortion(distortion)\n",
    "            index += len(morph.replace('\\'', ''))\n",
    "\n",
    "    distortions = set()\n",
    "    do_distortion(word)\n",
    "    return get_n_best_words(distortions, max_amount)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "affiliated-palestinian",
   "metadata": {},
   "source": [
    "Протестируем"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "orange-bhutan",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['отвариться']\n",
      "[]\n"
     ]
    }
   ],
   "source": [
    "word = 'отвориться'\n",
    "print(roots_distortion(word, morphs_list=get_morphs_list(word)))\n",
    "word = 'послушаться'\n",
    "print(roots_distortion(word, morphs_list=get_morphs_list(word)))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "prompt-voice",
   "metadata": {},
   "source": [
    "### Правописание приставок"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "induced-occupation",
   "metadata": {},
   "source": [
    "Заменим приставки с помощью спика морфем на их пару."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "separated-validity",
   "metadata": {},
   "outputs": [],
   "source": [
    "prefix_pairs = {'пре':'при', 'при':'пре',\n",
    "                'без':'бес', 'бес':'без',\n",
    "                'воз':'вос', 'вос':'воз',\n",
    "                'вз':'вс', 'вс':'вз',\n",
    "                'из':'ис', 'ис':'из',\n",
    "                'низ':'нис', 'нис':'низ',\n",
    "                'раз':'рас', 'рас':'раз',\n",
    "                'роз':'рос', 'рос':'роз',\n",
    "                'чрез':'чрес', 'чрес':'чрез'}\n",
    "\n",
    "def prefixs_distortion(word: str, morphs_list: List[str]=[], max_amount: int=1) -> List[str]:\n",
    "    def do_distortion(word_: str) -> None:\n",
    "        index = 0\n",
    "        for morph in morphs_list:\n",
    "            if morph in prefix_pairs and morph == word_[index:index + len(morph)]:\n",
    "                distortion = word_[:index] + prefix_pairs[morph] + word_[index + len(morph):]\n",
    "                if distortion not in distortions and distortion != word:\n",
    "                    distortions.add(distortion)\n",
    "                    do_distortion(distortion)\n",
    "            index += len(morph.replace('\\'', ''))\n",
    "            \n",
    "    distortions = set()\n",
    "    do_distortion(word)\n",
    "    return get_n_best_words(distortions, max_amount)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "negative-pipeline",
   "metadata": {},
   "source": [
    "Протестируем"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "facial-worse",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['преподняться']\n",
      "['беспреданница', 'безпреданница']\n",
      "[]\n"
     ]
    }
   ],
   "source": [
    "word = 'приподняться'\n",
    "print(prefixs_distortion(word, morphs_list=get_morphs_list(word)))\n",
    "word = 'бесприданница'\n",
    "print(prefixs_distortion(word, morphs_list=get_morphs_list(word), max_amount=2))\n",
    "word = 'отвориться'\n",
    "print(prefixs_distortion(word, morphs_list=get_morphs_list(word)))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "provincial-payroll",
   "metadata": {},
   "source": [
    "### Гласные Ы и И после приставок"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "measured-villa",
   "metadata": {},
   "outputs": [],
   "source": [
    "vowels_after_prefixs_pairs = {'и':'ы', 'ы':'и'}\n",
    "\n",
    "def vowels_after_prefixs_distortion(word: str, morphs_list: List[str]=[], max_amount: int=1) -> List[str]:\n",
    "    if 0 < max_amount and morphs_list:\n",
    "        morph = morphs_list[0].replace('\\'', '')\n",
    "        if len(morph) < len(word) and word[len(morph)] in vowels_after_prefixs_pairs:\n",
    "            distortion = word[:len(morph)] +\\\n",
    "                        vowels_after_prefixs_pairs[word[len(morph)]] +\\\n",
    "                        word[len(morph) + 1:]\n",
    "            if distortion != word:\n",
    "                return [distortion]\n",
    "    return []"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "floppy-illness",
   "metadata": {},
   "source": [
    "Протестируем"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "piano-remark",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['межырригационный']\n",
      "['предистория']\n",
      "[]\n",
      "[]\n"
     ]
    }
   ],
   "source": [
    "word = 'межирригационный'\n",
    "print(vowels_after_prefixs_distortion(word, morphs_list=get_morphs_list(word)))\n",
    "word = 'предыстория'\n",
    "print(vowels_after_prefixs_distortion(word, morphs_list=get_morphs_list(word)))\n",
    "word = 'предыстория'\n",
    "print(vowels_after_prefixs_distortion(word, morphs_list=get_morphs_list(word), max_amount=0))\n",
    "word = 'отвориться'\n",
    "print(vowels_after_prefixs_distortion(word, morphs_list=get_morphs_list(word)))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "fixed-mainland",
   "metadata": {},
   "source": [
    "### Правописание ться/тся"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "independent-cincinnati",
   "metadata": {},
   "source": [
    "Заменим постфикс слова ться на тся и наоборот."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "conditional-graph",
   "metadata": {},
   "outputs": [],
   "source": [
    "postfix_pairs = {'тся':'ться', 'ться':'тся'}\n",
    "\n",
    "def postfixs_distortion(word: str, morphs_list: List[str]=[], max_amount: int=1) -> List[str]:\n",
    "    if 0 < max_amount:\n",
    "        for postfix in postfix_pairs:\n",
    "            if word[-len(postfix):] == postfix:\n",
    "                return [word[:-len(postfix)] + postfix_pairs[postfix]]\n",
    "    return []"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "recent-calculator",
   "metadata": {},
   "source": [
    "Протестируем"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "experimental-cleaner",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['приподнятся']\n",
      "['приподняться']\n",
      "[]\n",
      "[]\n"
     ]
    }
   ],
   "source": [
    "word = 'приподняться'\n",
    "print(postfixs_distortion(word))\n",
    "word = 'приподнятся'\n",
    "print(postfixs_distortion(word))\n",
    "word = 'приподнятся'\n",
    "print(postfixs_distortion(word, max_amount=0))\n",
    "word = 'приподнялась'\n",
    "print(postfixs_distortion(word))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "professional-ranch",
   "metadata": {},
   "source": [
    "### Двойные согласные"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "excited-resistance",
   "metadata": {},
   "source": [
    "Удалим двойные согласные и добавим лишнюю н у суффиксов ан, ян, ын, ин."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "danish-august",
   "metadata": {},
   "outputs": [],
   "source": [
    "vowels = set('аяоёуюыиэе')\n",
    "\n",
    "def two_in_row_distortion(word: str, morphs_list: List[str]=[], max_amount: int=1) -> List[str]:\n",
    "    def do_distortion(word_: str) -> None:\n",
    "        for i in range(len(word_)):\n",
    "            if i > 0 and word_[i - 1] == word_[i] and word_[i] not in vowels:\n",
    "                distortion = word_[:i] + word_[i + 1:]\n",
    "                if distortion not in distortions and distortion != word:\n",
    "                    distortions.add(distortion)\n",
    "                    do_distortion(distortion)\n",
    "            \n",
    "    distortions = set()\n",
    "    do_distortion(word)\n",
    "    return get_n_best_words(distortions, max_amount)\n",
    "\n",
    "single_suffixs = set(['ан', 'ян', 'ын', 'ин'])\n",
    "\n",
    "def duplicate_distortion(word: str, morphs_list: List[str], max_amount: int=1) -> List[str]:\n",
    "    def do_distortion(word_: str) -> None:\n",
    "        index = 0\n",
    "        for morph in morphs_list:\n",
    "            morph = morph.replace('\\'', '')\n",
    "            if morph in single_suffixs and morph == word_[index:index + len(morph)] and\\\n",
    "                index + len(morph) < len(word) and word_[index + len(morph) - 1] != word_[index + len(morph)]:\n",
    "                    distortion = word_[:index] + morph + 'н' + word_[index + len(morph):]\n",
    "                    if distortion not in distortions and distortion != word:\n",
    "                        distortions.add(distortion)\n",
    "                        do_distortion(distortion)\n",
    "            index += len(morph)\n",
    "            \n",
    "    distortions = set()\n",
    "    do_distortion(word)\n",
    "    return get_n_best_words(distortions, max_amount)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "first-limit",
   "metadata": {},
   "source": [
    "Протестируем"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "promising-strand",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['безаконый']\n",
      "[]\n",
      "[]\n",
      "['костянной']\n"
     ]
    }
   ],
   "source": [
    "word = 'беззаконный'\n",
    "print(two_in_row_distortion(word))\n",
    "word = 'костяной'\n",
    "print(two_in_row_distortion(word))\n",
    "word = 'беззаконный'\n",
    "print(duplicate_distortion(word, morphs_list=get_morphs_list(word)))\n",
    "word = 'костяной'\n",
    "print(duplicate_distortion(word, morphs_list=get_morphs_list(word)))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "cooperative-luxembourg",
   "metadata": {},
   "source": [
    "### Непроизносимые согласные"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "needed-louisiana",
   "metadata": {},
   "source": [
    "Удалим непроизносимую букву в наборе подряд идущих согласных. Если таких не нашлось. Поробуем добавить эту лишнюю букву."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "driven-intranet",
   "metadata": {},
   "outputs": [],
   "source": [
    "silent_consonants_dict = {'стн':'сн',\n",
    "                          'стл':'сл',\n",
    "                          'ндш':'нш',\n",
    "                          'ндц':'нц',\n",
    "                          'нтг':'нг',\n",
    "                          'здн':'зн',\n",
    "                          'здц':'зц',\n",
    "                          'рдц':'рц',\n",
    "                          'рдч':'рч',\n",
    "                          'лнц':'нц',\n",
    "                          'вств':'ств'}\n",
    "\n",
    "def silent_consonants_distortion(word: str, morphs_list: List[str]=[], max_amount: int=1) -> List[str]:\n",
    "    def do_distortion(word_: str) -> None:\n",
    "        for key, value in silent_consonants_dict.items():\n",
    "            distortion = word_.replace(key, value, 1)\n",
    "            if distortion not in distortions and distortion != word:\n",
    "                distortions.add(distortion)\n",
    "                do_distortion(distortion)\n",
    "        if len(distortions) == 0:\n",
    "            for key, value in silent_consonants_dict.items():\n",
    "                distortion = word_.replace(value, key, 1)\n",
    "                if distortion not in distortions and distortion != word:\n",
    "                    distortions.add(distortion)\n",
    "                    do_distortion(distortion)\n",
    "    \n",
    "    distortions = set()\n",
    "    do_distortion(word)\n",
    "    return get_n_best_words(distortions, max_amount)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "compound-intention",
   "metadata": {},
   "source": [
    "Протестируем"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "little-emission",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['сонце']\n",
      "['чуство']\n",
      "['ужастный']\n",
      "['стнсл', 'снстл']\n",
      "[]\n"
     ]
    }
   ],
   "source": [
    "word = 'солнце'\n",
    "print(silent_consonants_distortion(word))\n",
    "word = 'чувство'\n",
    "print(silent_consonants_distortion(word))\n",
    "word = 'ужасный'\n",
    "print(silent_consonants_distortion(word))\n",
    "word = 'стнстл'\n",
    "print(silent_consonants_distortion(word, max_amount=2))\n",
    "word = 'костяной'\n",
    "print(silent_consonants_distortion(word))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "equal-working",
   "metadata": {},
   "source": [
    "### Твердый знак"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "deadly-skating",
   "metadata": {},
   "source": [
    "Заменим твердый знак на мягкий."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "traditional-death",
   "metadata": {},
   "outputs": [],
   "source": [
    "def hard_sign_distortion(word: str, morphs_list: List[str]=[], max_amount: int=1) -> List[str]:\n",
    "    if 0 < max_amount and 'ъ' in set(word):\n",
    "        return [word.replace('ъ', 'ь', 1)]\n",
    "    return []"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "binding-salon",
   "metadata": {},
   "source": [
    "Протестируем"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "armed-maximum",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['обьём']\n",
      "[]\n",
      "[]\n"
     ]
    }
   ],
   "source": [
    "word = 'объём'\n",
    "print(hard_sign_distortion(word))\n",
    "word = 'объём'\n",
    "print(hard_sign_distortion(word, max_amount=0))\n",
    "word = 'солнце'\n",
    "print(hard_sign_distortion(word))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "guilty-crawford",
   "metadata": {},
   "source": [
    "### Дефисные написания"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "pregnant-scholarship",
   "metadata": {},
   "source": [
    "Уберем дефисы или заменим на пробел."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "fifteen-tribune",
   "metadata": {},
   "outputs": [],
   "source": [
    "def hyphen_distortion(word: str, morphs_list: List[str]=[], max_amount: int=1) -> List[str]:\n",
    "    if 1 < max_amount and '-' in set(word):\n",
    "        return [word.replace('-', ' '), word.replace('-', '')]\n",
    "    if 0 < max_amount and '-' in set(word):\n",
    "        return [word.replace('-', '')]\n",
    "    return []"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "material-pixel",
   "metadata": {},
   "source": [
    "Протестируем"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "closed-capture",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['все таки', 'всетаки']\n",
      "['всетаки']\n",
      "[]\n",
      "[]\n"
     ]
    }
   ],
   "source": [
    "word = 'все-таки'\n",
    "print(hyphen_distortion(word, max_amount=3))\n",
    "word = 'все-таки'\n",
    "print(hyphen_distortion(word, max_amount=1))\n",
    "word = 'все-таки'\n",
    "print(hyphen_distortion(word, max_amount=0))\n",
    "word = 'костяной'\n",
    "print(hyphen_distortion(word))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "possible-worker",
   "metadata": {},
   "source": [
    "### Финальная функция внесения искажений в слова"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "serious-frederick",
   "metadata": {},
   "source": [
    "Скомбинируем все созданные искажения, начиная с более узких правил, которые зависят от морфем, заканчивая самыми простыми заменями согласных и гласных. Ограничим количество полученных искажений переменной **max_amount**."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "occupational-schema",
   "metadata": {},
   "outputs": [],
   "source": [
    "def create_distortions(word: str, lemma: str, max_amount: int=6) -> List[str]:\n",
    "    morphs_list=get_morphs_list(lemma)    \n",
    "    distortions = set([word])\n",
    "    \n",
    "    def do_function(func, stress: bool=False) -> None:\n",
    "        result = set()\n",
    "        amount = (max_amount // len(distortions)) - 1\n",
    "        for distortion in distortions:\n",
    "            if stress:\n",
    "                if word in stress_df.index:\n",
    "                    stress_word = stress_df.loc[word]['stress']\n",
    "                    result.update(func(distortion, stress_word, morphs_list, amount))\n",
    "            else:\n",
    "                result.update(func(distortion, morphs_list, amount))\n",
    "        distortions.update(result)     \n",
    "\n",
    "    do_function(roots_distortion)\n",
    "    do_function(prefixs_distortion)\n",
    "    do_function(vowels_after_prefixs_distortion)\n",
    "    do_function(postfixs_distortion)\n",
    "    do_function(two_in_row_distortion)\n",
    "    do_function(duplicate_distortion)\n",
    "    do_function(silent_consonants_distortion)\n",
    "    do_function(hard_sign_distortion)\n",
    "    do_function(hyphen_distortion)\n",
    "    do_function(consonants_distortion)\n",
    "    do_function(stress_vowels_distortion, True)\n",
    "    \n",
    "    distortions.remove(word)\n",
    "    return list(distortions)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "victorian-facing",
   "metadata": {},
   "source": [
    "Протестируем"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "multiple-rubber",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['нописаные', 'нописанные', 'написоные', 'написаные', 'написонные']\n",
      "['безсмысленое', 'бесмысленное', 'безсмысленное', 'бесмысленое']\n",
      "['собераеться', 'соберается', 'собираеться']\n",
      "['престариного']\n"
     ]
    }
   ],
   "source": [
    "print(create_distortions(word='написанные', lemma='написанный'))\n",
    "print(create_distortions(word='бессмысленное', lemma='бессмысленный'))\n",
    "print(create_distortions(word='собирается', lemma='собираться'))\n",
    "print(create_distortions(word='престаринного', lemma='престаринный'))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "pleased-bunny",
   "metadata": {},
   "source": [
    "### Проверка работы функции"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "aging-graphic",
   "metadata": {},
   "source": [
    "Напишем функции для создания датасета слов повышенной сложности с искажениями из текстового документа со словами и визуализации количества полученных искажений."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "informed-following",
   "metadata": {},
   "outputs": [],
   "source": [
    "def countplot_distortions_df(distortions_df: pd.DataFrame) -> None:\n",
    "    print('Всего слов: {}'.format(len(distortions_df)))\n",
    "    print('Слов без искажений: {}'.format(len(distortions_df[distortions_df['distortions_amount'] == 0])))\n",
    "    print('Слов с искажениями: {}'.format(len(distortions_df[distortions_df['distortions_amount'] != 0])))\n",
    "    \n",
    "    fig, ax = plt.subplots(figsize=(8, 4))\n",
    "    \n",
    "    sns.countplot(x=distortions_df[distortions_df['distortions_amount'] != 0]['distortions_amount'])\n",
    "    ax.set_title('Количество слов с определенном количеством искажений')\n",
    "    ax.set_ylabel('Количество слов')\n",
    "    ax.set_xlabel('Количество искажений')\n",
    "    \n",
    "    plt.show()\n",
    "    \n",
    "def analyze_distortions(filepath: str, stop=None, show_plot=True) -> pd.DataFrame:\n",
    "    distortions_df = pd.DataFrame(columns=['distortions', 'distortions_amount'])\n",
    "    with open(filepath, 'rb') as f:\n",
    "        for i, word in enumerate(tqdm(f.read().decode('utf-8').split())):\n",
    "            word = transform_word(word)[0]\n",
    "            if word and word not in distortions_df.index and word.find('-') < 0:\n",
    "                difficulty = word_difficulty(word)\n",
    "                if 0.5 <= difficulty['difficulty']:\n",
    "                    distortions = create_distortions(word, difficulty['lemma'])\n",
    "                    info = {'distortions': distortions,\n",
    "                            'distortions_amount': len(distortions),\n",
    "                            'difficulty': difficulty['difficulty']}\n",
    "                    row = pd.Series(info, name=word)\n",
    "                    distortions_df = distortions_df.append(row)\n",
    "            if stop and stop <= i:\n",
    "                break\n",
    "    if show_plot:\n",
    "        countplot_distortions_df(distortions_df)\n",
    "    return distortions_df"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "rotary-gender",
   "metadata": {},
   "source": [
    "Возьмем небольшой текст, чтобы мы могли протестировать внесение искажений. Например, отрывок из 'Алисы в стране чудес' Льюиса Кэрролла."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "indian-technology",
   "metadata": {},
   "outputs": [],
   "source": [
    "alice_in_wonderland_fullname = save_zip_txt(url='https://royallib.com/get/txt/keroll_lyuis/alisa_v_strane_chudes.zip',\n",
    "                                     dirname='datasets/texts/alice_in_wonderland/',\n",
    "                                     new_filename='alice_in_wonderland.txt')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "resident-lobby",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|███████████████████████████████████████████████████████████████████████████| 28613/28613 [01:22<00:00, 346.47it/s]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Всего слов: 1397\n",
      "Слов без искажений: 105\n",
      "Слов с искажениями: 1292\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 576x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>distortions</th>\n",
       "      <th>distortions_amount</th>\n",
       "      <th>difficulty</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>word</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>возобновилось</th>\n",
       "      <td>[вособновилось, восабновилось, васобновилось, ...</td>\n",
       "      <td>5</td>\n",
       "      <td>0.880897</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>непререкаемо</th>\n",
       "      <td>[непририкаемо, неприрекаемо, ниприрекаемо, неп...</td>\n",
       "      <td>5</td>\n",
       "      <td>0.884922</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>победоносно</th>\n",
       "      <td>[побидоносно, победаносно, побидоностно, побед...</td>\n",
       "      <td>5</td>\n",
       "      <td>0.892810</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>проникновенным</th>\n",
       "      <td>[пронекновенным, пронекновеным, праникновеным,...</td>\n",
       "      <td>5</td>\n",
       "      <td>0.894737</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>подчеркивают</th>\n",
       "      <td>[подчиркивают, потчиркивают, потчеркивают, пот...</td>\n",
       "      <td>5</td>\n",
       "      <td>0.900000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>несообразности</th>\n",
       "      <td>[несаобразности, несаобраздности, несообраздно...</td>\n",
       "      <td>5</td>\n",
       "      <td>0.933333</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>перекрестному</th>\n",
       "      <td>[перекресному, пирекресному, перикресному, пер...</td>\n",
       "      <td>5</td>\n",
       "      <td>0.950000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>непревзойденным</th>\n",
       "      <td>[нипревзойденым, непревзойденым, непревзайдены...</td>\n",
       "      <td>5</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>постепенностью</th>\n",
       "      <td>[постепеннастью, постипенностью, постипеностью...</td>\n",
       "      <td>5</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>соотносительности</th>\n",
       "      <td>[саотносительности, соотноситильности, соотнос...</td>\n",
       "      <td>5</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                                         distortions  \\\n",
       "word                                                                   \n",
       "возобновилось      [вособновилось, восабновилось, васобновилось, ...   \n",
       "непререкаемо       [непририкаемо, неприрекаемо, ниприрекаемо, неп...   \n",
       "победоносно        [побидоносно, победаносно, побидоностно, побед...   \n",
       "проникновенным     [пронекновенным, пронекновеным, праникновеным,...   \n",
       "подчеркивают       [подчиркивают, потчиркивают, потчеркивают, пот...   \n",
       "несообразности     [несаобразности, несаобраздности, несообраздно...   \n",
       "перекрестному      [перекресному, пирекресному, перикресному, пер...   \n",
       "непревзойденным    [нипревзойденым, непревзойденым, непревзайдены...   \n",
       "постепенностью     [постепеннастью, постипенностью, постипеностью...   \n",
       "соотносительности  [саотносительности, соотноситильности, соотнос...   \n",
       "\n",
       "                  distortions_amount  difficulty  \n",
       "word                                              \n",
       "возобновилось                      5    0.880897  \n",
       "непререкаемо                       5    0.884922  \n",
       "победоносно                        5    0.892810  \n",
       "проникновенным                     5    0.894737  \n",
       "подчеркивают                       5    0.900000  \n",
       "несообразности                     5    0.933333  \n",
       "перекрестному                      5    0.950000  \n",
       "непревзойденным                    5    1.000000  \n",
       "постепенностью                     5    1.000000  \n",
       "соотносительности                  5    1.000000  "
      ]
     },
     "execution_count": 32,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "distortions_df = analyze_distortions(filepath=alice_in_wonderland_fullname, stop=None)\n",
    "distortions_df.rename_axis('word').sort_values(by=['distortions_amount', 'difficulty', 'word']).tail(10)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "interested-thumbnail",
   "metadata": {},
   "source": [
    "# Весь нужный код"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "flexible-height",
   "metadata": {},
   "outputs": [],
   "source": [
    "from collections import defaultdict\n",
    "\n",
    "\n",
    "# Функция сложности слова\n",
    "exec(open('scripts/word_difficulty.py').read())\n",
    "\n",
    "\n",
    "# Датасеты\n",
    "fullname = save_zip_csv(url='https://github.com/Koziev/NLP_Datasets/raw/master/Stress/all_accents.zip',\n",
    "                        dirname='datasets/stress',\n",
    "                        new_filename='all_accents.tsv')\n",
    "stress_df = pd.read_csv(fullname, sep='\\t', names=['Lemma', 'stress'])\n",
    "stress_df = stress_df.drop_duplicates(subset=['Lemma'])\n",
    "stress_df = stress_df.set_index('Lemma')\n",
    "\n",
    "letters_dict = dict()\n",
    "letters = set('абвгдежзийклмнопрстуфхцчшщъыьэюя')\n",
    "for word in morph_df.index:\n",
    "    for i in range(len(word) - 1):\n",
    "        c = word[i]\n",
    "        next_c = word[i + 1]\n",
    "        if c in letters and next_c in letters:\n",
    "            if c not in letters_dict:\n",
    "                letters_dict[c] = defaultdict(int)\n",
    "            letters_dict[c][next_c] += 1\n",
    "letter_df = pd.DataFrame.from_dict(letters_dict, orient='index').fillna(0)\n",
    "letter_df = letter_df.div(letter_df.max(axis=1), axis=0)\n",
    "\n",
    "\n",
    "# Вспомогательные функции\n",
    "def get_morphs_list(lemma: str) -> List[str]:\n",
    "    if lemma not in morph_df.index:\n",
    "        return []\n",
    "    return list(morph_df.loc[lemma]['analysis'].split('/'))\n",
    "\n",
    "def get_word_probability(word: str) -> int:\n",
    "    probability = 0\n",
    "    amount = 0\n",
    "    for i in range(len(word) - 1):\n",
    "        c = word[i]\n",
    "        next_c = word[i + 1]\n",
    "        if c in letters and next_c in letters:\n",
    "            probability += letter_df.loc[c][next_c]\n",
    "            amount += 1\n",
    "    return probability / amount if amount else 0\n",
    "\n",
    "def get_n_best_words(words, max_amount: int=1) -> List[str]:\n",
    "    if max_amount < len(words):\n",
    "        return sorted(list(words), key=lambda word: get_word_probability(word), reverse=True)[:max_amount]\n",
    "    return list(words)\n",
    "\n",
    "stress_vowels_dict = {'о':'а', 'а':'о', 'е':'и', 'и':'е', 'я':'е'}\n",
    "\n",
    "def stress_vowels_distortion(word: str, stress_word: str, morphs_list: List[str]=[], max_amount: int=1) -> List[str]:  \n",
    "    def do_distortion(word_: str, stress_word: str) -> None:\n",
    "        if 0 <= stress_word.find('^') < len(stress_word) - 2:\n",
    "            i = stress_word.find('^')\n",
    "            stress_word = stress_word[:i] + stress_word[i + 1].upper() + stress_word[i + 2:]\n",
    "        else:\n",
    "            return []\n",
    "        for i in range(1, len(word_) - 3):\n",
    "            if i < len(stress_word) and stress_word[i] in stress_vowels_dict and stress_word[i] == word_[i]:\n",
    "                distortion = word_[:i] + stress_vowels_dict[word_[i]] + word_[i + 1:]\n",
    "                if distortion not in distortions and distortion != word:\n",
    "                    distortions.add(distortion)\n",
    "                    do_distortion(distortion, stress_word)\n",
    "        \n",
    "    distortions = set()\n",
    "    do_distortion(word, stress_word)\n",
    "    return get_n_best_words(distortions, max_amount)\n",
    "\n",
    "deaf_consonants = set('пфктшсхцчщ')\n",
    "consonants_pairs = {\n",
    "    'б':'п', \n",
    "    'г':'к', \n",
    "    'д':'т', \n",
    "    'ж':'ш', \n",
    "    'з':'с', \n",
    "}\n",
    "\n",
    "def consonants_distortion(word: str, morphs_list: List[str]=[], max_amount: int=1) -> List[str]:  \n",
    "    def do_distortion(word_: str) -> None:\n",
    "        for i in range(len(word_)):\n",
    "            distortion = None\n",
    "            c = word_[i] \n",
    "            after_c = word_[i + 1] if i < len(word_) - 1 else None\n",
    "            if c in consonants_pairs and (i == len(word_) - 1 or after_c in deaf_consonants):\n",
    "                distortion = word_[:i] + consonants_pairs[c] + word_[i + 1:]\n",
    "                if distortion not in distortions and distortion != word:\n",
    "                    distortions.add(distortion)\n",
    "                    do_distortion(distortion)\n",
    "        \n",
    "    distortions = set()\n",
    "    do_distortion(word)\n",
    "    return get_n_best_words(distortions, max_amount)\n",
    "\n",
    "root_pairs = {'раст':'рост', 'ращ':'рощ', 'рос':'рас',\n",
    "               'лаг':'лог', 'лож':'лаж',\n",
    "               'скак':'скок', 'скоч':'скач',\n",
    "               'гар':'гор', 'гор':'гар', \n",
    "               'твар':'твор','твор':'твар', \n",
    "               'клан':'клон', 'клон':'клан',\n",
    "               'зар':'зор', 'зор':'зар',\n",
    "               'плав':'плов', 'плов':'плав',\n",
    "               'мак':'мок', 'моч':'мач',\n",
    "               'равн':'ровн', 'ровн':'равн',\n",
    "               'бер':'бир', 'бир':'бер',\n",
    "               'дер':'дир', 'дир':'дер',\n",
    "               'пер':'пир', 'пир':'пер',\n",
    "               'тер':'тир', 'тир':'тер',\n",
    "               'мер':'мир', 'мир':'мер',\n",
    "               'жег':'жиг', 'жиг':'жег',\n",
    "               'стел':'стил', 'стил':'стел',\n",
    "               'блест':'блист', 'блист':'блест',\n",
    "               'чет':'чит', 'чит':'чет',\n",
    "               'кас':'кос', 'кос':'кас'}\n",
    "    \n",
    "def roots_distortion(word: str, morphs_list: List[str]=[], max_amount: int=1) -> List[str]:\n",
    "    def do_distortion(word_: str) -> None:\n",
    "        index = 0\n",
    "        for morph in morphs_list:\n",
    "            if morph in root_pairs and morph == word_[index:index + len(morph)]:\n",
    "                distortion = word_[:index] + root_pairs[morph] + word_[index + len(morph):]\n",
    "                if distortion not in distortions and distortion != word:\n",
    "                    distortions.add(distortion)\n",
    "                    do_distortion(distortion)\n",
    "            index += len(morph.replace('\\'', ''))\n",
    "\n",
    "    distortions = set()\n",
    "    do_distortion(word)\n",
    "    return get_n_best_words(distortions, max_amount)\n",
    "\n",
    "prefix_pairs = {'пре':'при', 'при':'пре',\n",
    "                'без':'бес', 'бес':'без',\n",
    "                'воз':'вос', 'вос':'воз',\n",
    "                'вз':'вс', 'вс':'вз',\n",
    "                'из':'ис', 'ис':'из',\n",
    "                'низ':'нис', 'нис':'низ',\n",
    "                'раз':'рас', 'рас':'раз',\n",
    "                'роз':'рос', 'рос':'роз',\n",
    "                'чрез':'чрес', 'чрес':'чрез'}\n",
    "\n",
    "def prefixs_distortion(word: str, morphs_list: List[str]=[], max_amount: int=1) -> List[str]:\n",
    "    def do_distortion(word_: str) -> None:\n",
    "        index = 0\n",
    "        for morph in morphs_list:\n",
    "            if morph in prefix_pairs and morph == word_[index:index + len(morph)]:\n",
    "                distortion = word_[:index] + prefix_pairs[morph] + word_[index + len(morph):]\n",
    "                if distortion not in distortions and distortion != word:\n",
    "                    distortions.add(distortion)\n",
    "                    do_distortion(distortion)\n",
    "            index += len(morph.replace('\\'', ''))\n",
    "            \n",
    "    distortions = set()\n",
    "    do_distortion(word)\n",
    "    return get_n_best_words(distortions, max_amount)\n",
    "\n",
    "vowels_after_prefixs_pairs = {'и':'ы', 'ы':'и'}\n",
    "\n",
    "def vowels_after_prefixs_distortion(word: str, morphs_list: List[str]=[], max_amount: int=1) -> List[str]:\n",
    "    if 0 < max_amount and morphs_list:\n",
    "        morph = morphs_list[0].replace('\\'', '')\n",
    "        if len(morph) < len(word) and word[len(morph)] in vowels_after_prefixs_pairs:\n",
    "            distortion = word[:len(morph)] +\\\n",
    "                        vowels_after_prefixs_pairs[word[len(morph)]] +\\\n",
    "                        word[len(morph) + 1:]\n",
    "            if distortion != word:\n",
    "                return [distortion]\n",
    "    return []\n",
    "\n",
    "postfix_pairs = {'тся':'ться', 'ться':'тся'}\n",
    "\n",
    "def postfixs_distortion(word: str, morphs_list: List[str]=[], max_amount: int=1) -> List[str]:\n",
    "    if 0 < max_amount:\n",
    "        for postfix in postfix_pairs:\n",
    "            if word[-len(postfix):] == postfix:\n",
    "                return [word[:-len(postfix)] + postfix_pairs[postfix]]\n",
    "    return []\n",
    "\n",
    "vowels = set('аяоёуюыиэе')\n",
    "\n",
    "def two_in_row_distortion(word: str, morphs_list: List[str]=[], max_amount: int=1) -> List[str]:\n",
    "    def do_distortion(word_: str) -> None:\n",
    "        for i in range(len(word_)):\n",
    "            if i > 0 and word_[i - 1] == word_[i] and word_[i] not in vowels:\n",
    "                distortion = word_[:i] + word_[i + 1:]\n",
    "                if distortion not in distortions and distortion != word:\n",
    "                    distortions.add(distortion)\n",
    "                    do_distortion(distortion)\n",
    "            \n",
    "    distortions = set()\n",
    "    do_distortion(word)\n",
    "    return get_n_best_words(distortions, max_amount)\n",
    "\n",
    "single_suffixs = set(['ан', 'ян', 'ын', 'ин'])\n",
    "\n",
    "def duplicate_distortion(word: str, morphs_list: List[str], max_amount: int=1) -> List[str]:\n",
    "    def do_distortion(word_: str) -> None:\n",
    "        index = 0\n",
    "        for morph in morphs_list:\n",
    "            morph = morph.replace('\\'', '')\n",
    "            if morph in single_suffixs and morph == word_[index:index + len(morph)] and\\\n",
    "                index + len(morph) < len(word) and word_[index + len(morph) - 1] != word_[index + len(morph)]:\n",
    "                    distortion = word_[:index] + morph + 'н' + word_[index + len(morph):]\n",
    "                    if distortion not in distortions and distortion != word:\n",
    "                        distortions.add(distortion)\n",
    "                        do_distortion(distortion)\n",
    "            index += len(morph)\n",
    "            \n",
    "    distortions = set()\n",
    "    do_distortion(word)\n",
    "    return get_n_best_words(distortions, max_amount)\n",
    "\n",
    "silent_consonants_dict = {'стн':'сн',\n",
    "                          'стл':'сл',\n",
    "                          'ндш':'нш',\n",
    "                          'ндц':'нц',\n",
    "                          'нтг':'нг',\n",
    "                          'здн':'зн',\n",
    "                          'здц':'зц',\n",
    "                          'рдц':'рц',\n",
    "                          'рдч':'рч',\n",
    "                          'лнц':'нц',\n",
    "                          'вств':'ств'}\n",
    "\n",
    "def silent_consonants_distortion(word: str, morphs_list: List[str]=[], max_amount: int=1) -> List[str]:\n",
    "    def do_distortion(word_: str) -> None:\n",
    "        for key, value in silent_consonants_dict.items():\n",
    "            distortion = word_.replace(key, value, 1)\n",
    "            if distortion not in distortions and distortion != word:\n",
    "                distortions.add(distortion)\n",
    "                do_distortion(distortion)\n",
    "        if len(distortions) == 0:\n",
    "            for key, value in silent_consonants_dict.items():\n",
    "                distortion = word_.replace(value, key, 1)\n",
    "                if distortion not in distortions and distortion != word:\n",
    "                    distortions.add(distortion)\n",
    "                    do_distortion(distortion)\n",
    "    \n",
    "    distortions = set()\n",
    "    do_distortion(word)\n",
    "    return get_n_best_words(distortions, max_amount)\n",
    "\n",
    "def hard_sign_distortion(word: str, morphs_list: List[str]=[], max_amount: int=1) -> List[str]:\n",
    "    if 0 < max_amount and 'ъ' in set(word):\n",
    "        return [word.replace('ъ', 'ь', 1)]\n",
    "    return []\n",
    "\n",
    "def hyphen_distortion(word: str, morphs_list: List[str]=[], max_amount: int=1) -> List[str]:\n",
    "    if 1 < max_amount and '-' in set(word):\n",
    "        return [word.replace('-', ' '), word.replace('-', '')]\n",
    "    if 0 < max_amount and '-' in set(word):\n",
    "        return [word.replace('-', '')]\n",
    "    return []\n",
    "\n",
    "\n",
    "# Основная функция сложности слова\n",
    "def create_distortions(word: str, lemma: str, max_amount: int=6) -> List[str]:\n",
    "    morphs_list=get_morphs_list(lemma)    \n",
    "    distortions = set([word])\n",
    "    \n",
    "    def do_function(func, stress: bool=False) -> None:\n",
    "        result = set()\n",
    "        amount = (max_amount // len(distortions)) - 1\n",
    "        for distortion in distortions:\n",
    "            if stress:\n",
    "                if word in stress_df.index:\n",
    "                    stress_word = stress_df.loc[word]['stress']\n",
    "                    result.update(func(distortion, stress_word, morphs_list, amount))\n",
    "            else:\n",
    "                result.update(func(distortion, morphs_list, amount))\n",
    "        distortions.update(result)     \n",
    "\n",
    "    do_function(roots_distortion)\n",
    "    do_function(prefixs_distortion)\n",
    "    do_function(vowels_after_prefixs_distortion)\n",
    "    do_function(postfixs_distortion)\n",
    "    do_function(two_in_row_distortion)\n",
    "    do_function(duplicate_distortion)\n",
    "    do_function(silent_consonants_distortion)\n",
    "    do_function(hard_sign_distortion)\n",
    "    do_function(hyphen_distortion)\n",
    "    do_function(consonants_distortion)\n",
    "    do_function(stress_vowels_distortion, True)\n",
    "    \n",
    "    distortions.remove(word)\n",
    "    return list(distortions)\n",
    "\n",
    "# Функции анализа искажений .txt\n",
    "def countplot_distortions_df(distortions_df: pd.DataFrame) -> None:\n",
    "    print('Всего слов: {}'.format(len(distortions_df)))\n",
    "    print('Слов без искажений: {}'.format(len(distortions_df[distortions_df['distortions_amount'] == 0])))\n",
    "    print('Слов с искажениями: {}'.format(len(distortions_df[distortions_df['distortions_amount'] != 0])))\n",
    "    \n",
    "    fig, ax = plt.subplots(figsize=(8, 4))\n",
    "    \n",
    "    sns.countplot(x=distortions_df[distortions_df['distortions_amount'] != 0]['distortions_amount'])\n",
    "    ax.set_title('Количество слов с определенном количеством искажений')\n",
    "    ax.set_ylabel('Количество слов')\n",
    "    ax.set_xlabel('Количество искажений')\n",
    "    \n",
    "    plt.show()\n",
    "    \n",
    "def analyze_distortions(filepath: str, stop=None, show_plot=True) -> pd.DataFrame:\n",
    "    distortions_df = pd.DataFrame(columns=['distortions', 'distortions_amount'])\n",
    "    with open(filepath, 'rb') as f:\n",
    "        for i, word in enumerate(tqdm(f.read().decode('utf-8').split())):\n",
    "            word = transform_word(word)[0]\n",
    "            if word and word not in distortions_df.index and word.find('-') < 0:\n",
    "                difficulty = word_difficulty(word)\n",
    "                if 0.5 <= difficulty['difficulty']:\n",
    "                    distortions = create_distortions(word, difficulty['lemma'])\n",
    "                    info = {'distortions': distortions,\n",
    "                            'distortions_amount': len(distortions),\n",
    "                            'difficulty': difficulty['difficulty']}\n",
    "                    row = pd.Series(info, name=word)\n",
    "                    distortions_df = distortions_df.append(row)\n",
    "            if stop and stop <= i:\n",
    "                break\n",
    "    if show_plot:\n",
    "        countplot_distortions_df(distortions_df)\n",
    "    return distortions_df"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
